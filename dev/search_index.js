var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = StylizedFacts","category":"page"},{"location":"#StylizedFacts","page":"Home","title":"StylizedFacts","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for StylizedFacts.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [StylizedFacts]","category":"page"},{"location":"#StylizedFacts.Hurst_RS-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Real","page":"Home","title":"StylizedFacts.Hurst_RS","text":"Hurst_RS(Z::AbstractVector) -> Tuple{Float64,Float64,Float64}\n\nEstimate the Hurst exponent via rescaled range analysis.\n\nArguments\n\nZ::AbstractVector: the real-valued time series vector\n\nKeywords\n\nadjust::Bool = true: correct the estimate via the Anis-Lloyd adjustment\n\nReturns\n\nTuple{Float64,Float64,Float64}: the Hurst exponent in the first position, the   log(n) values in the second position, and the log(R/S) values in the third position.\n\nThrows\n\nArgumentError: throws an error if the length of Z is less than 500.\n\nNotes\n\nFor several different lengths n, divide the time series Z` of length N into d subseries of length n, where n is an integral divisor of N. For each subseries m = 1, 2, ..., d, follow the steps presented in CITE. per confint paper -> log2, no n < 50, at least 512 observations\n\nReferences\n\nhttps://watermark.silverchair.com/63-1-111.pdf?token=AQECAHi208BE49Ooan9kkhWErcy7Dm3ZL9Cf3qfKAc485ysgAAAvUwggLxBgkqhkiG9w0BBwagggLiMIIC3gIBADCCAtcGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMZn9ZfD4HT8p48oH7AgEQgIICqFFc432q0RZTSB95JYv8I7i-nrSWUQdoHy2CfmhMYjbyoUXNCkoCV1HuMbJC28IYbaz0Li3n2PcmUeZjBkqoqecOZLQMypFp5PCR2xxqRqOUW3VQP2lrvPH-pJe9znb-RBrgY2wNF0zkvxadG1f7GAntRh2JBchmRWoCLKANBerIZnzKlaufIpRMOAq6uajOo36gzoNvlBGI2WghtJhsZuQqCFwHYRcTtmefCGIJRr4xOXs7D1ap9F5OwL8NhsRuZ8pPq0YQuQctiSjU2DRmyD0nJI1BybRb-678jD06sgI0XH7HuCWoUAVSqYHjuX1gvdYac1LHZ3nIq4AsNmVSPJzr3cZ9-C4rwJ-kmbZCjO2TXavD28xpLcwFuOzhjrwoQGLfhLFvYiyjJWLyUMnH4sFDS2QKR39IVX37qpN6B3xipuowiAeY13dyzWwzE3TjIGBumESD5UHOu3Q05yMi7DHlGZq-R9G2SxYJB4PnOOqgWvR7uMgCGw1Xjg0jWs9UrpTcDuQMTe0QoKjWUwjNTI5sodgI8YBogBCCXankFtuqYSsiElfl5CI7CcWj33VX6H7sMv2zSE8j-XyuOZKGHA5VnvF4N2mjBupHbId7rh6olQ8ANub2jqKsv8colB2Zv6ygtVq0INA760Q3oduR2fl1TAc5Y-VxJ17GtWUjRPLkbgsBhITu6KpqRdQZIZnQIl7dUGh9TdLtxcuMkGEkLqSk3qsCQ02Vj7zhb5zwdk4L3dZ7UMU8Ov1YlUJExbkuRnDKJfTWi9FOkDnYTbapjLbsWsbW4hJA_T1es65nEOfQVs2IaXu2Sbg6QLMiqHgPnVyauzMVFMhPtm-j2Coj0dc4zLFtRDct9aUxX5NNhrThVjwJurtXh9MhcKtWyAFMdq5u https://arxiv.org/pdf/1805.08931.pdf https://arxiv.org/pdf/cond-mat/0103510.pdf\n\n\n\n\n\n","category":"method"},{"location":"#StylizedFacts.Hurst_confint-Tuple{Int64}","page":"Home","title":"StylizedFacts.Hurst_confint","text":"Hurst_confint(N::Int; level::Symbol=:ninetyfive) -> Tuple{Float64,Float64}\n\nReturns the confidence interval for Hurst exponents estimated via rescaled range analysis.\n\nArguments\n\nN::Int: the length of the time series\n\nKeywords\n\nlevel::Symbol=:ninetyfive: the confidence level (options -> :ninety,   :ninetyfive (default), :ninetynine)\n\nReturns\n\nTuple{Float64,Float64,Float64}: the lower bound of the Hurst exponent in the first   position and the upper bound of the Hurst exponent in the second position (according to the   confidence interval).\n\nReferences\n\nhttps://arxiv.org/pdf/cond-mat/0103510.pdf\n\n\n\n\n\n","category":"method"},{"location":"#StylizedFacts.Hurst_confint-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Real","page":"Home","title":"StylizedFacts.Hurst_confint","text":"Hurst_confint(Z::AbstractVector; level::Symbol=:ninetyfive) -> Tuple{Float64,Float64}\n\nReturns the confidence interval for Hurst exponents estimated via rescaled range analysis.\n\nReturns a Tuple with the lower and upper bound of the Hurst exponent (according to the confidence interval).\n\nArguments\n\nZ::AbstractVector: the real-valued time series vector\n\nKeywords\n\nlevel::Symbol=:ninetyfive: the confidence level (options -> :ninety,   :ninetyfive (default), :ninetynine)\n\nReturns\n\nTuple{Float64,Float64,Float64}: the lower bound of the Hurst exponent in the first   position and the upper bound of the Hurst exponent in the second position (according to the   confidence interval).\n\nThrows\n\nArgumentError: throws an error if the length of Z is less than 500.\n\nReferences\n\nhttps://arxiv.org/pdf/cond-mat/0103510.pdf\n\n\n\n\n\n","category":"method"},{"location":"#StylizedFacts.absence_lin_autocor_test-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Real","page":"Home","title":"StylizedFacts.absence_lin_autocor_test","text":"absence_lin_autocor_test(r::AbstractVector) -> Bool\n\nCompute the autocorrelation function and estimate the Hurst exponent to test for the absence of linear autocorrelation in the real-valued vector of returns r.\n\nArguments\n\nr::AbstractVector{T}: the real-valued vector of returns\n\nReturns\n\nBool: true if the sample exhibits the absence of linear autocorrelation and false   otherwise.\n\nNotes\n\nThe test...\n\nReferences\n\n\n\n\n\n\n\n","category":"method"},{"location":"#StylizedFacts.compute_return_array-Tuple{DataFrames.DataFrame}","page":"Home","title":"StylizedFacts.compute_return_array","text":"compute_return_array(data::DataFrame; cc=true) -> DataFrame\n\nCompute the return array of the price series DataFrame\n\nArguments\n\ndata::DataFrame: the price series DataFrame\n\nKeywords\n\ncc::Bool=true: denotes the use of close-to-close returns series (set cc=false if   open-to-close returns series is desired)\n\nReturns\n\nDataFrame: the first column :timestamp denotes the timestamp and the second column\n\n:R denotes the return instance corresponding to the timestamp\n\n\n\n\n\n","category":"method"},{"location":"#StylizedFacts.cond_heavy_tails_test-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Real","page":"Home","title":"StylizedFacts.cond_heavy_tails_test","text":"cond_heavy_tails_test(r::Vector) -> Bool\n\nCompute the kurtosis and Jarque-Bera statistic of the volatility-corrected residual time series to test for the presence of conditional heavy tails in the real-valued vector of returns r.\n\nArguments\n\nr::AbstractVector{T}: the real-valued vector of returns\n\nReturns\n\nBool: true if the sample exhibits conditional heavy tails and false otherwise.\n\nNotes\n\nThe test...\n\nReferences\n\n\n\n\n\n\n\n","category":"method"},{"location":"#StylizedFacts.crosscor_volume_volatility_test-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractVector{T}}} where T<:Real","page":"Home","title":"StylizedFacts.crosscor_volume_volatility_test","text":"crosscor_volume_volatility_test(u::Vector, r::Vector)\n\nCompute the cross-correlation function to test for the presence of volatility clustering in the real-valued vector of volume u and real-valued vector of returns r.\n\nArguments\n\nu::AbstractVector{T}: the real-valued vector of volume\nr::AbstractVector{T}: the real-valued vector of returns\n\nReturns\n\nBool: true if the sample exhibits volatility clustering and false otherwise.\n\nNotes\n\nThe test...\n\nReferences\n\n\n\n\n\n\n\n","category":"method"},{"location":"#StylizedFacts.heavy_tails_test-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Real","page":"Home","title":"StylizedFacts.heavy_tails_test","text":"heavy_tails_test(r::AbstractVector) -> Bool\n\nCompute the kurtosis and Jarque-Bera statistic to test for the presence of heavy tails in the real-valued vector of returns r.\n\nArguments\n\nr::AbstractVector{T}: the real-valued vector of returns\n\nReturns\n\nBool: true if the sample exhibits heavy tails and false otherwise.\n\nReferences\n\n\n\n\n\n\n\n","category":"method"},{"location":"#StylizedFacts.leverage_effect_test-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Real","page":"Home","title":"StylizedFacts.leverage_effect_test","text":"leverage_effect_test(r::Vector) -> Bool\n\nCompute the cross-correlation of returns with subsequent squared returns to test for the presence of the leverage effect in the real-valued vector of returns y.\n\nArguments\n\nr::AbstractVector{T}: the real-valued vector of returns\n\nReturns\n\nBool: true if the sample exhibits the leverage effect and false otherwise.\n\nNotes\n\nThe test...\n\nReferences\n\n\n\n\n\n\n\n","category":"method"},{"location":"#StylizedFacts.longmemory_volume_test-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Real","page":"Home","title":"StylizedFacts.longmemory_volume_test","text":"longmemory_volume_test(u::Vector) -> Bool\n\nCompute the autocorrelation function and estimate the Hurst exponent to test for the presence of long memory in the real-valued vector of volume u.\n\nArguments\n\nu::AbstractVector{T}: the real-valued vector of volume\n\nReturns\n\nBool: true if the sample exhibits long memory and false otherwise.\n\nNotes\n\nThe test...\n\nReferences\n\n\n\n\n\n\n\n","category":"method"},{"location":"#StylizedFacts.nonlinear_dependence_test-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Real","page":"Home","title":"StylizedFacts.nonlinear_dependence_test","text":"nonlinear_dependence_test(r::Vector) -> Bool\n\nCompute nonlinear transforms to test for the presence of nonlinear dependence in the real-valued vector of returns r.\n\nArguments\n\nr::AbstractVector{T}: the real-valued vector of returns\n\nReturns\n\nBool: true if the sample exhibits nonlinear dependence and false otherwise.\n\nNotes\n\nThe test...\n\nReferences\n\n\n\n\n\n\n\n","category":"method"},{"location":"#StylizedFacts.univariate_test_summary-Tuple{Vector{String}, Dict{String, DataFrames.DataFrame}, Dict{String, DataFrames.DataFrame}}","page":"Home","title":"StylizedFacts.univariate_test_summary","text":"univariate_test_summary(ticker_symbol_array::Vector{String},\n                        price_data_dictionary::Dict{String,DataFrame},\n                        return_data_dictionary::Dict{String,DataFrame};\n                        cc::Bool=true,\n                        print_msg::Bool=true)\n\nCompute the result of each univariate stylized facts test for each ticker in ticker_symbol_array.\n\nArguments\n\nticker_symbol_array::Vector{String}: list of ticker symbols to be tested\nprice_data_dictionary::Dict{String,DataFrame}: dictionary with a ticker symbol   key and corresponding value of a DataFrame with OHLC price and volume data\nreturn_data_dictionary::Dict{String,DataFrame}: dictionary with a ticker symbol   key and corresponding value of a DataFrame with returns series data (see:    computereturnarray() method)\n\nKeywords\n\ncc::Bool=true: denotes the use of close-to-close returns series (set cc=false if   open-to-close returns series)\nprint_msg::Bool=true: print out a summary of the stylized fact tests results\n\nReturns\n\nTuple{DataFrame,DataFrame}: the first DataFrame stores the result true if the ticker   exhibits the stylized fact for that respective test column and false otherwise; the   second DataFrame is a summary of the percentage of tickers that were able to reproduce   the stylized fact of each respective test column.\n\nReferences\n\n\n\n\n\n\n\n","category":"method"},{"location":"#StylizedFacts.volatility_clustering_test-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Real","page":"Home","title":"StylizedFacts.volatility_clustering_test","text":"volatility_clustering_test(r::AbstractVector) -> Bool\n\nCompute the autocorrelation function and estimate the Hurst exponent to test for the presence of volatility clustering in the real-valued vector of returns r.\n\nArguments\n\nr::AbstractVector{T}: the real-valued vector of returns\n\nReturns\n\nBool: true if the sample exhibits volatility clustering and false otherwise.\n\nNotes\n\nThe test...\n\nReferences\n\n\n\n\n\n\n\n","category":"method"}]
}
